name: 'Terraform CI'

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
  schedule:
  - cron: "0 2 * * *"
    
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    env:
      GANDI_KEY: ${{ secrets.GANDI_API_KEY }}
      OS_USERNAME: ${{ secrets.OS_USERNAME }}
      OS_PROJECT_NAME: ${{ secrets.OS_USERNAME }}
      OS_PASSWORD: '${{ secrets.OS_PASSWORD }}'
      OS_DOMAIN_NAME: "public"
      OS_PROJECT_DOMAIN_NAME: "public"
      OS_USER_DOMAIN_NAME: "public"
      TF_VAR_DNS_SUBDOMAIN: ${{ secrets.DNS_SUBDOMAIN }}
      TF_VAR_DNS_ZONE: ${{ secrets.DNS_ZONE }}
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform -chdir="./tests/staging" init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform -chdir="./tests/staging" plan

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: terraform -chdir="./tests/staging" apply -auto-approve

      # Health check on the Jitsi instance
    - name: Test Jisti web service
      uses: jtalk/url-health-check-action@v2
      with:
        url: http://${{ secrets.DNS_SUBDOMAIN }}.${{ secrets.DNS_ZONE }}
        follow-redirect: false
        max-attempts: 15
        retry-delay: 30s
        retry-all: true
      timeout-minutes: 10

    - name: Terraform Destroy
      if: always()  # Run even on previous step failure
      run: terraform -chdir="./tests/staging" destroy -auto-approve
      
